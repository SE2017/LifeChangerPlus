Trirmadura Ariyawansa
John Eng 
Daniel Huang
Chris Kim
Kyungsuk Lee
Kevin Lee

Group 16 - Software Engineering 14:332:452 SP 2017

ABOUT:
	LifeExtender+ is an app designed for those with both an interest in
	their health, physical fitness, and improving and organizing their time.
	This application will be developed with many different features to 
	try to help its users stay on track of their fitness and of their goals.
	
	Included in this build are the following:
		1). HomeTab - Displays the user's schedule through Google Calendar
		    integration and allows the user to add events to their calendar.
		2). StatsTab - First iteration of a statistics page that will 
		    display graphs and keep records of the user's physical activity
		    and Health Index, a figure generated to gauge the user's physical
		    health based on their physical activity. 
		3). GoalsTab - Allows the user to write down and store records and
		    progress of their goals, for physical activity or anything else.
		4). MapsTab - Allows the user to view their current location
		5). SettingsTab - Allows the user to change settings of the polling rate 		    of the GPS, muting notifications, public/private setting of their  			    Health Index. 


FILE DESCRIPTIIONS:

The main code (Java files) are listed below with their descriptions. Each java file (except the ones dedicated to being objects) have an associated xml file under /res/layout directory. The associated icons are located in /res/drawable.


*Note* - in Android, an activity that is created has a java file and an xml file. The xml files describe the layout designs and interact with the java files (e.g. button activates a method).

ACTIVITY FILES:

AchievedGoals.java - processes finished goals to be displayed
AddActivePeriod.java - processes information for accepting/rejecting suggestions for active periods to add to Calendar
AddingGoals.java - processes information for adding a GoalObject to GoalsTab
AppCompatPreferenceActivity.java - Autogenerated code for app framework
bottomSectionFrag.java - navigaton between tabs situated on the bottom of the screen while app is running
ChangeCalendar.java -  adjusts calendar algorithm based on settings
ChangeLocationGPS.java - adjusts polling rate of GPS based on settings
ChangeNotifcations.java - adjusts the options for notifcations based on settings
ChangeProfile.java - adjusts the status of the profile based on settings
EditGoals.java - edits an existing GoalObject in the Goals Tab
g_graph.java - processes data for time spent at the gym
GoalsTab.java - tab that interacts with creating/editing GoalObjects and displaying them
h_graph.java - processes the data for the HealthIndex
HomeTab.java - Uses the GoogleAPI to ask for account and retrieves Calendar Data
LocationService.java - listens for changes in GPS and calculates velocities
MapsTab.java - interacts with the Google Maps Api to display a functional map on screen as well as adding Active period locations, and GPS polling for coordinates
r_graph.java - processes the data for running times
SettingsTab.java - processes changes to the settings and relays information over the other tabs
StatsTab.java - interacts with the graph classes to display graphs based on the data collected (Health Index, Running/Walking, Gym Times)
w_graph.java - processes the data for walking times

JAVA CLASS FILES:
eTime.java - 
	Java class for TimeObject that extracts the data from Google Calendar containing data about the hour, minute, second, day, and name of each event's beginning and end time.
GoalObjects.java
	Java class for GoalsObject that contains arbitrary values for user input containin upper and lower bounds of the goal, the name of the goal and a key(Hash) for the database
IndexObjects.Java
	Java class for IndexObject that describes a user's HealthIndex (HI) which includes currentHI, high-intensity and low-intensity times, the date and a key (Hash) for the database
LocationObject.java 
	Java class for LocationObject that describes GPS data including the latitude, longitude, speed, and key (Hash) for the database
TimeObject.java
	Java class for time and date of Active Period locations
SettingsObject.java - 
	Java class for Settings object that includes the polling rate of the GPS, the time the user wakes up, the public/private boolean for the HealthIndex and the mute setting for notifications

RUNNING THE PROGRAM:

In order for the Android Application to run, Android Studio must be installed along with it's dependencies, the SDKs (Software Development Kit).

https://developer.android.com/studio/index.html (Link to download)

The required SDK's are managed within Android Studio under the SDK manager.
	Platforms:
		Android 7.1.1 (Nougat)
	SDK Tools:
		Android SDK Build-Tools
		Android Emulator
		Android SDK Platform-Tools
		Android SDK Tools
		Google Play APK Expansion Library
		Google Play services
		Intel x86 Emulator Accelerator
	Support Repository
		ConstraintLayout for Android
		Solver for ConstraintLayout
		Android Support Repository
		Google Repository

Android Studio should be updated to the latest version. By clicking "Run App", an emulator must be installed 
(Create New Virtual Device -> (Phone) Nexus 5 -> Nougat -> Finish)
The operating system will load and the app will automatically be opened (after APK's finish installing). The progress of the emulator will be shown on the status bar on the bottom of Android Studio.

WHILE RUNNING THE PROGRAM:

	User Authentification:
		The app uses the Google Calendar API, which requires a Google Account. One is provided for the demonstration purposes.

		Username: lextenderplus@gmail.com
		Password: marsic2017

	Should a user want to change accounts, then Android OS has options to change Google Accounts through Settings -> Accounts -> Google. The state of the emulator (therefore the phone) is saved through each run. 


DATABASE ACCESS:

	The database can be manually accessed through:
		www.console.firebase.google.com/
		with the same user credentials as above. 

